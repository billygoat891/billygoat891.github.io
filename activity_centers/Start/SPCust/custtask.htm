<HTML xmlns:spcust>
<HEAD><TITLE>Change Starting Place</TITLE>
<link rel=stylesheet type="text/css" href="">

<OBJECT id=ACHelp CLASSID="CLSID:f14b8060-3ef5-11d3-85be-006097df8c11">
</OBJECT>
<SCRIPT LANGUAGE="javascript">
// As soon as possible, figure out what theme to use.  Do this even before
// the page content loads to avoid flicker.
document.styleSheets(0).href = "../startpage/scheme/" + ACHelp.desktopTheme + "/desktop.css";
</SCRIPT>

<STYLE type="text/css">
spcust\:HOVER { behavior: url(hover.htc); }
</STYLE>

</HEAD>

<SCRIPT LANGUAGE="jscript">

var g_xmlNode;
var g_xmlText;
var g_xmlDesc;
var g_xmlProg;
var g_strProgPath;
var g_fGenericIcon = false;

function init()
{
    var item = window.dialogArguments.xmlNode;

    g_xmlNode = item;

    g_xmlText = item.selectSingleNode("TEXT");
    idTitle.value = g_xmlText.text;

    g_xmlDesc = item.selectSingleNode("SUBTEXT");
    idDesc.value = g_xmlDesc.text;

    g_xmlProg = item.selectSingleNode("HREF");
    g_strProgPath = ACHelp.ACShellURLToPath(g_xmlProg.text);
    idProgDesc.value = g_strProgPath;

    //HighlightTables();
}

/*
 *  Debugging: Turn on borders for tables so we can see the layout.
 */
function HighlightTables()
{
    var a = document.all.tags("TABLE");
    var i;
    for (i = 0; i < a.length; i++) {
        a(i).border = 1;
    }
    document.dir = "rtl";
}

</SCRIPT>

<SCRIPT DEFER>
function getLoc(word)
{
    var parent = window.dialogArguments.containingBehavior;
    return parent.getLoc(word);
}

function changeApplication(e)
{
    var newName =
        ACHelp.ACGetOpenFileName(0x02105814,
                                 ACHelp.ACShellURLToPath(g_xmlProg.text),
                                 getLoc("cdtitle"),
                                 ACHelp.ACShellURLToPath("shell:programfiles"),
                                 getLoc("cddefext"),
                                 getLoc("cdcombo"));

    if (newName)
    {
        idProgDesc.value = ACHelp.ACPathToShellURL(newName);

        // If the Name is still the default, then put the friendly name
        // there, too
        if (idTitle.value == getLoc("newname"))
            idTitle.value = idProgDesc.value;

        // BUGBUG -- For now, changing the target genericizes the icon
        g_fGenericIcon = true;
    }
}

function get_isdirty()
{
    return idTitle.value != g_xmlText.text ||
           idDesc.value != g_xmlDesc.text ||
           idProgDesc.value != g_strProgPath;
}

function saveAll()
{
    if (get_isdirty())
    {
        g_xmlText.text = idTitle.value;
        g_xmlDesc.text = idDesc.value;
        g_xmlProg.text = ACHelp.ACPathToShellURL(idProgDesc.value);
        if (g_fGenericIcon)
        {
            var icon = g_xmlNode.selectSingleNode("ICON");
            if (icon) {
                icon.text = "scheme\\generic.gif";
            }
        }
        var parent = window.dialogArguments.containingBehavior;
        parent.setDirty();
    }
    window.close();
}

function closeAll()
{
    window.close();
}

//
//  By default, hitting ESC in an edit control restores the text to the
//  original value.  We want it to clear the contents.
//
function fixEdit()
{
    if (event.keyCode == 27)
    {
        window.close();
        event.returnValue = false;
    }
}
</SCRIPT>

<BODY onload="init()">

<TABLE WIDTH=100%>
    <TR>
        <TD>
            <SPAN CLASS="textSecondary"><ID ID=L_TaskName>Name:</ID></SPAN>
        </TD>
        <TD>
            <SPAN CLASS="textSecondary">
                <INPUT ID=idTitle CLASS="text" TYPE="text" STYLE="font-size:10px" maxLength=80 size=40 onkeydown="fixEdit()">
                </INPUT>
            </SPAN>
        </TD>
        <TD></TD>
    </TR>

    <TR>
        <TD>
            <SPAN CLASS="textSecondary"><ID ID=L_TaskDesc>Description:</ID></SPAN>
        </TD>
        <TD>
            <SPAN CLASS="textSecondary">
                <INPUT ID=idDesc  CLASS="text" TYPE="text" STYLE="font-size:10px" maxLength=80 size=40 onkeydown="fixEdit()">
                </INPUT>
            </SPAN>
        </TD>
        <TD></TD>
    </TR>

    <TR>
        <TD VALIGN=baseline>
            <SPAN CLASS="textSecondary"><ID ID=L_TaskProg>Program:</ID></SPAN>
        </TD>
        <TD VALIGN=baseline>
            <SPAN CLASS="textSecondary">
                <INPUT ID=idProgDesc CLASS="text" TYPE="text" STYLE="font-size:10px" maxLength=80 size=40 onkeydown="fixEdit()">
                </INPUT>
            </SPAN>
        </TD>
        <TD ALIGN=right>
            <spcust:HOVER classNormal="buttons" classHover="buttonsHover">
                <BUTTON CLASS="buttons"
                        onclick="changeApplication()"
                ><ID id=L_Browse>Browse...</ID></BUTTON>
            </spcust:HOVER>
        </TD>
    </TR>

</TABLE>

<TABLE>
    <TR>
        <TD WIDTH=100%></TD>
        <TD NOWRAP>
            <spcust:HOVER classNormal="buttons" classHover="buttonsHover">
                <BUTTON CLASS="buttons" ID=idButtons
                        onclick="saveAll()"
                ><ID id=L_OK>OK</ID></BUTTON>
            </spcust:HOVER>
            <SPAN STYLE="width:16px"></SPAN>
            <spcust:HOVER classNormal="buttons" classHover="buttonsHover">
                <BUTTON CLASS="buttons" ID=idButtons
                        onclick="closeAll()"
                ><ID id=L_Cancel>Cancel</ID></BUTTON>
            </spcust:HOVER>
        </TD>

        <!-- Make all the buttons the same width -->
        <SCRIPT>
        {
            var i, maxWidth = 55;
            for (i = 0; i < idButtons.length; i++) {
                maxWidth = Math.max(idButtons[i].offsetWidth, maxWidth);
            }
            maxWidth += 10;
            for (i = 0; i < idButtons.length; i++) {
                idButtons[i].style.width = maxWidth;
            }
        }
        </SCRIPT>


    </TR>
</TABLE>

</BODY>
</HTML>
